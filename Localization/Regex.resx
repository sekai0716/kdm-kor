<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddDamageRegex" xml:space="preserve">
    <value>(?&lt;target&gt;.+)[이가] (?&lt;skill&gt;.+) 추가 효과의 효과로 (?&lt;damage&gt;[^a-zA-Z]+)의 대미지를 받았습니다</value>
    <comment>추가 대미지</comment>
  </data>
  <data name="Chat" xml:space="preserve">
    <value>\[charname:</value>
  </data>
  <data name="CommandRegex" xml:space="preserve">
    <value>(?&lt;pet&gt;.+)[이가] 명령: (?&lt;skill&gt;.+)[을를] 사용해 (?&lt;target&gt;.+)에게 (?&lt;damage&gt;[^a-zA-Z]+)의 대미지를 줬습니다\.</value>
    <comment>명령 스킬(정령)</comment>
  </data>
  <data name="CommonSummonedOffRegex" xml:space="preserve">
    <value>(?&lt;pet&gt;.+)의 소환이 해제됐습니다\.</value>
  </data>
  <data name="CommonSummonedRegex" xml:space="preserve">
    <value>(((?&lt;name&gt;.+)[이가] )?소환: |((?&lt;name&gt;.+)[이가] )?)(?&lt;skill&gt;.+)[을를] 사용해 (?&lt;pet&gt;.+)[을를] 소환했습니다\.</value>
    <comment>자신,타 유저 정령류 소환</comment>
  </data>
  <data name="CommonSummonedSumAtk" xml:space="preserve">
    <value>(?&lt;pet&gt;.+)[이가] 소환: (?&lt;skill&gt;.+) 효과를 사용해 (?&lt;target&gt;.+)에게 (?&lt;damage&gt;[^a-zA-Z]+)의 대미지를 줬습니다\.</value>
    <comment>소환수가 소환하여 공격하는 경우</comment>
  </data>
  <data name="ContinuousDamage" xml:space="preserve">
    <value>(치명타! )?(?&lt;target&gt;.+)[이가] (?&lt;skill&gt;.+)의 효과로 (?&lt;damage&gt;[^a-zA-Z]+)의 (중독 )?대미지를 받았습니다\.</value>
    <comment>일반적인 도트 대미지</comment>
  </data>
  <data name="ContinuousRegex" xml:space="preserve">
    <value>(치명타! )?((?&lt;name&gt;.+)[이가] )?(?&lt;skill&gt;.+)[을를] 사용해 (?&lt;target&gt;.+)([이가] 중독 상태가 됐습니다|에게 지속적인 대미지([을를]| 효과를) 줬습니다)\.</value>
    <comment>일반적인 도트 추가</comment>
  </data>
  <data name="DelayedRegex" xml:space="preserve">
    <value>((?&lt;name&gt;.+)[이가] )?(?&lt;skill&gt;.+)[을를] (사용합니다|사용해 (?&lt;target&gt;.+)[이가] 지연 폭발 효과를 받았습니다)\.</value>
    <comment>지연폭발,태풍솬류 도트추가</comment>
  </data>
  <data name="Effect" xml:space="preserve">
    <value> Effect</value>
  </data>
  <data name="EffectDamageRegex" xml:space="preserve">
    <value>(치명타 !)?(?&lt;target&gt;.+)[이가] (?&lt;effect&gt;.+) 효과의 효과로 (?&lt;damage&gt;[^a-zA-Z]+)의 대미지를 받았습니다\.</value>
    <comment>자체버프류.</comment>
  </data>
  <data name="EffectRegex" xml:space="preserve">
    <value>((?&lt;name&gt;.+)[이가] )?(?&lt;effect&gt;.+)[을를] 사용해 (효과가 발생됐습니다|자신에게 영향을 줬습니다)\.</value>
    <comment>자체버프류. (바람의약속,폭약바르기)</comment>
  </data>
  <data name="EnergySummonedRegex" xml:space="preserve">
    <value>((?&lt;name&gt;.+)[이가] )?소환: (?&lt;skill&gt;.+)을 사용해 (?&lt;target&gt;.+)[을를] 공격할 (?&lt;pet&gt;.+)[을를] 소환했습니다\.</value>
    <comment>치유성의 소환, 정령의 기운류</comment>
  </data>
  <data name="GodStoneAttrDamageRegex" xml:space="preserve">
    <value>(?&lt;target&gt;.+)[이가] 마법(?&lt;effect&gt;.+) 피해 효과의 효과로 (?&lt;damage&gt;[^a-zA-Z]+)의 대미지를 받았습니다\.</value>
  </data>
  <data name="GodStonePoisonRegex" xml:space="preserve">
    <value>(?&lt;target&gt;.+)[이가] 중독의 효과로 (?&lt;damage&gt;[^a-zA-Z]+)의 중독 대미지를 받았습니다\.</value>
    <comment>중독신석</comment>
  </data>
  <data name="InflictedRegex" xml:space="preserve">
    <value>(치명타! )?((?&lt;name&gt;.+)[이가] )?(?&lt;target&gt;.+)에게 (?&lt;damage&gt;[^a-zA-Z]+)의 (|치명적인 )대미지를 줬습니다\.</value>
  </data>
  <data name="InflictedSkillRegex" xml:space="preserve">
    <value>(치명타! )?((?&lt;name&gt;.+)[이가] )?(?&lt;skill&gt;.+)[을를] 사용해 ((?&lt;target&gt;.+)에게 (?&lt;damage&gt;[^a-zA-Z]+)의 대미지를 줬습니다|(?&lt;target&gt;.+)에게 (?&lt;damage&gt;[^a-zA-Z]+)의 대미지를 주고 (?&lt;effect&gt;.+) 효과가 발생됐습니다|(?&lt;target&gt;.+)[이가] (?&lt;damage&gt;[^a-zA-Z]+)의 대미지를 (받고|입고) 일부 강화 마법이 제거됐습니다)\.</value>
    <comment>일반스킬, 효과,마법역류스킬</comment>
  </data>
  <data name="JoinedGroupRegex" xml:space="preserve">
    <value>(?&lt;name&gt;.+) 님이 파티에 참가했습니다\.</value>
  </data>
  <data name="KickedFromGroupRegex" xml:space="preserve">
    <value>(?&lt;name&gt;.+) has been kicked out of your group\.</value>
  </data>
  <data name="LeftGroupRegex" xml:space="preserve">
    <value>(?&lt;name&gt;.+) 님이 파티를 떠났습니다\.</value>
  </data>
  <data name="TimestampRegex" xml:space="preserve">
    <value>(?&lt;time&gt;[^a-zA-Z]+) : </value>
  </data>
  <data name="YouEarnedKinahRegex" xml:space="preserve">
    <value>(?&lt;kinah&gt;[^a-zA-Z]+)키나를 얻었습니다\.</value>
  </data>
  <data name="YouGainedApRegex" xml:space="preserve">
    <value>(?&lt;ap&gt;[^a-zA-Z]+) 어비스 포인트를 얻었습니다\.</value>
  </data>
  <data name="YouGainedExpRegex" xml:space="preserve">
    <value>(?&lt;target&gt;.+)에게 (?&lt;exp&gt;[^a-zA-Z]+)만큼의 경험치를 얻었습니다\.</value>
  </data>
  <data name="YouSpentKinahRegex" xml:space="preserve">
    <value>(?&lt;kinah&gt;[^a-zA-Z]+)키나를 사용했습니다\.</value>
  </data>
</root>